C       ENTER.FTF
        SUBROUTINE ENTER(VALID, REPEAT)
C
C       THIS IS THE ENTER FUNCTIONAL UNIT
C
C       IT PERFORMS ALL THE PROCESSING ASSOCIATED WITH THE ENTER
C       SPECIFICATION.
C
        INTEGER REPEAT, PLGID(3), ID(3)
        LOGICAL VALID, FIRSTIM
        DATA FIRSTIM /.TRUE./
C
        COMMON /FILES/ FILES(7, 5), FLIBLIS(7), PIDFILE(7), PPFILE(7)
        INTEGER FLIBLIS, PIDFILE, PPFILE
C
        COMMON /OWNPRM/ PRMPCP, UNPROMP, JPROM
        LOGICAL PRMPCP, UNPROMP
C
        COMMON /CPGLOB/ KURSOR, LINSIZ, NATCH, INLINE(270), ISTTY,
     1  HUSH, UNCOLA, IPROMP, IDFILE(5)
        LOGICAL ISTTY, HUSH, UNCOLA
C
        COMMON /HASHCON/ HASH, NHASH, THISSIG, SIGID, NEXTSIG,
     1  SIGPIN, SIGFLAG
        DOUBLE PRECISION SIGID
        INTEGER HASH, NHASH, THISSIG, SIGPIN
        LOGICAL SIGFLAG
C
        COMMON /SOCKET/ SOCID(2), NSOCPIN, NWORDS, SPINPNT, SOCFLAG,
     1  THISSOC
        INTEGER SOCID, NSOCPIN, SPINPNT, THISSOC
        LOGICAL SOCFLAG
C
        COMMON /PINS/ PINID, CORAL(2), XPIN, YPIN, PSIG, FROMSIG,
     1  TOSIG, PPPNT, SPRING, ATTRIB, DIST, CNGWORD, NULL, PINFLAG,
     2  THISPIN
        DOUBLE PRECISION PSIG
        INTEGER PINID, CORAL, FROMSIG, TOSIG, PPPNT, SPRING,
     1  ATTRIB, CNGWORD, NULL, THISPIN
        LOGICAL PINFLAG
C
        COMMON /TITLE/ TITLE(16), MODIFY(2), NEWMOD, MODFLG, WRITEIT,
     1  XMIN, XMAX, YMIN, YMAX, PICFRAM
        INTEGER TITLE
        LOGICAL MODFLG, NEWMOD, WRITEIT, PICFRAM
C
C
C       EXIT IF VALIDITY CHECK
        IF (.NOT. VALID) GO TO 100
C
C       VALIDITY CHECKING...CLOSE THE FILES
        CALL WCLOSE(FILES(1, 1) )
        CALL WCLOSE(FILES(1, 2) )
        CALL WCLOSE(FILES(1, 3) )
        CALL WCLOSE(FILES(1, 4) )
        CALL WCLOSE( PIDFILE(1) )
        CALL WCLOSE( PPFILE(1) )
        FIRSTIM = .TRUE.
        RETURN
C
C       NORMAL ENTRY...SET UP STUFF
  100   IF (.NOT. FIRSTIM) GO TO 110
        FIRSTIM = .FALSE.
        CALL WOPEN(FILES(1, 1) )
        CALL WOPEN(FILES(1, 2) )
        CALL WOPEN(FILES(1, 3) )
        CALL WOPEN(FILES(1, 4) )
        CALL WOPEN(PIDFILE(1) )
        CALL WOPEN(PPFILE(1) )
C
C       HERE IN GENERAL...GET A LINE, DETERMINE WHAT TO DO
  110   UNCOLA = .FALSE.
C
C       GET A LINE AND TEST IT
        CALL NEWLINE
C
C       DETERMINE IF THIS IS A VALID COMMAND
  120   I = LPARSE(16)
        PLGID(1) = 0
        PLGID(2) = 0
        PLGID(3) = 0
        ID(1) = 0
        ID(2) = 0
        GO TO (200, 300, 700, 800, 900), I
C
C       UNRECOGNIZABLE...SEE IF ANYONE ELSE KNOWS IT
        CALL LISTEST
        GO TO 120
C
C       HERE IF ERROR
  130   CALL ERROR('SYNTAX ERROR IN COMMAND', 'SYNTAX')
        GO TO 120
C
C       INVALID LIBRARY FILE
  140   CALL ERROR ('INVALID LIBRARY FILE', 'BAD FILE')
        GO TO 120
C
C       INVALID SIGNAL REFERENCE
  150   CALL ERROR('INVALID SIGNAL REFERENCE','BAD SIGNAL')
        GO TO 120
C
C       INVALID SOCKET/PIN IDENTIFICATION
  160   CALL ERROR('INVALID SOCKET/PIN IDENTIFICATION','BAD I.D.')
        GO TO 120
C
C
C
C       "USE/USING"...TEST FOR "PLUG LIBRARY/LIBRARIES"
  200   IF (LPARSE(15) .NE. 1) GO TO 130
        IF (LPARSE(17) .NE. 1) GO TO 130
  210   IF (.NOT. LOOKFN(I) ) GO TO 140
        CALL WOPEN(FLIBLIS(1) )
        FLIBLIS(3) = FLIBLIS(3) + 1
        WRITE (FLIBLIS(1) # FLIBLIS(3) ) IDFILE
        IF (LPARSE(42) .EQ. 0) GO TO 110
        CALL WCLOSE(FLIBLIS(1) )
        GO TO 210
C
C
C
C       "WIRE"...SPAN IT OUT
  300   CALL ANOTHER
        I = LPARSE(18)
        GO TO (400, 500, 600), I
        GO TO 130
C
C
C
C       "WIRE SIGNAL"
  400   CALL ANOTHER
        IF (.NOT. SIGREF(I) ) GO TO 150
        CALL ANOTHER
        IF (LPARSE(43) .NE. 1) GO TO 130
C
C       GOT "WIRE SIGNAL ***:"; NOW GET LIST
        CALL SOPM
  410   UNPROMP = .FALSE.
  420   CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 490
C
C       NOT ":"...ELIMINATE ","
        IF (LPARSE(42) .EQ. 1) GO TO 420
C
C       HERE FOR ELEMENT...DETERMINE IF SIGNAL SOURCE
        I = NOWCH(4, KANDO)
        ITEM = 0
        IF (I .NE. '$') GO TO 430
        ITEM = "004000000000
        CALL NEXTCH(5, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE PIN NAME, "," AND ":" RULED OUT..."$" EXAMINED
  430   IF (BPVFY(.FALSE.) ) GO TO 440
C
C       INVALID PIN DESCRIPTION
        CALL ERROR ('INVALID PIN DESCRIPTION','BAD PIN ID')
        GO TO 420
C
C       HAVE A VALID PIN...DETERMINE IF ALREADY HAS A SIGNAL
  440   IF (PSIG .EQ. 0) GO TO 460
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (ATTRIB .AND. "040000000000) .NE. 0) GO TO 450
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 420
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
  450   CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
  460   PSIG = SIGID
        ATTRIB = ATTRIB .OR. ITEM
        PINFLAG = .TRUE.
        CALL LINK1
        JPROM = JPROM + 1
        GO TO 410
C
C       DONE
  490   CALL ROPM
        GO TO 110
C
C
C
C       "WIRE EXACT"...TEST FOR "SIGNAL"
  500   CALL ANOTHER
        IF (LPARSE(19) .NE. 1) GO TO 130
        CALL ANOTHER
        IF (.NOT. SIGREF(I) ) GO TO 150
        CALL ANOTHER
        IF (LPARSE(43) .NE. 1) GO TO 130
C
C       GOT "WIRE EXACT SIGNAL ***:" ;  NOW GET DATA
        CALL SOPM
        K1 = 0
        K2 = 0
        UNPROMP = .FALSE.
  510   CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 570
C
C       HERE FOR ELEMENT
        IF (LPARSE(42) .EQ. 1) GO TO 510
        I = NOWCH(4, KANDO)
        ITEM = "000020000000
        IF (I .NE. '$') GO TO 520
        ITEM = "004020000000
        CALL NEXTCH(5, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE PIN NAME, "," AND ":" RULED OUT
  520   IF (BPVFY(.TRUE.) ) GO TO 530
C
C       INVALID PIN DESCRIPTION
        CALL ERROR ('INVALID PIN DESCRIPTION','BAD PIN ID')
C
C       HAVE A VALID PIN NAME...TEST IF SIGNAL ALREADY ASSIGNED
  530   IF (PSIG .EQ. 0) GO TO 550
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (ATTRIB .AND. "040000000000) .NE. 0) GO TO 540
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 510
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
  540   CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
  550   JPROM = JPROM + 1
        PSIG = SIGID
        ATTRIB = ATTRIB .OR. ITEM
        FROMSIG = K2
        PINFLAG = .TRUE.
        IF (K1 .NE. 0) GO TO 560
C
C       FIRST TIME AROUND...SET IT UP
        K1 = THISPIN
        K2 = THISPIN
        GO TO 510
C
C       SUCCESSIVE PINS...
  560   I = THISPIN
        CALL GETPIN(K2)
        K2 = I
        TOSIG = I
        PINFLAG = .TRUE.
        GO TO 510
C
C       DONE
  570   CALL ROPM
        IF (K1 .EQ. 0) GO TO 110
        CALL LINK2(K1, K2)
        GO TO 110
C
C
C
C       "WIRE SOCKET"
  600   CALL ANOTHER
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 120
        CALL ANOTHER
        IF (LPARSE(43) .NE. 1) GO TO 130
C
C       GOT "WIRE SOCKET ***:"   NOW GET DATA
        CALL SOPM
        UNPROMP = .FALSE.
  610   CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 660
C
C       ELEMINATE POSSIBLE ","
        IF (LPARSE(42) .EQ. 1) GO TO 610
C
C       DETERMINE IF POSSIBLE "(**)"
        CALL PSPVFY(.TRUE.)
        CALL ANOTHER
C
C       DETERMINE IF POSSIBLE SIGNAL SOURCE ( "$" )
        I = NOWCH(8, KANDO)
        ITEM = 0
        IF (I .NE. '$') GO TO 620
        ITEM = "004000000000
        CALL NEXTCH(1, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE SIGNAL NAME, "," AND ":" RULED OUT
  620   IF (SIGREF(I) ) GO TO 630
C
C       ERROR
        CALL ERROR ('INVALID SIGNAL REFERENCE','BAD SIGNAL')
        GO TO 610
C
C       HERE WITH VALID NEW SIGNAL
  630   IF (PSIG .EQ. 0) GO TO 650
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (ATTRIB .AND. "040000000000) .NE. 0) GO TO 640
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 610
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
  640   CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
  650   PSIG = SIGID
        ATTRIB = ATTRIB .OR. ITEM
        PINFLAG = .TRUE.
        ITEM = THISPIN
        CALL LINK1
        CALL GETPIN(ITEM)
        ITEM = SPRING
        CALL GETPIN(ITEM)
        JPROM = JPROM + 1
        GO TO 610
  660   CALL ROPM
        GO TO 110
C
C
C
C       "PLUG"...CHECK IT OUT
  700   CALL ANOTHER
        IF (.NOT. PACK(PLGID(1), 15, 0) ) GO TO 130
        CALL ANOTHER
        IF (LPARSE(20) .NE. 1) GO TO 130
        CALL ANOTHER
        IF (.NOT. BPVFY(.FALSE.) ) GO TO 160
        CALL ANOTHER
        IF (LPARSE(43) .NE. 1) GO TO 130
C
C       GOT "PLUG *** INTO ***:"...VERIFY PLUGGING OPERATION
        I = THISPIN
        IF (.NOT. PLUGSOC(I, PLGID(1) ) ) GO TO 120
C
C       DID IT SUCESSFULLY...PLUG NOW ATTACHED TO SOCKET
        CALL SOPM
        UNPROMP = .FALSE.
  710   CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 760
C
C       ELIMINATE POSSIBLE ","
        IF (LPARSE(42) .EQ. 1) GO TO 710
C
C       DETERMINE IF POSSIBLE "(**)"
        CALL PPPVFY(.TRUE.)
        CALL ANOTHER
C
C       DETERMINE IF POSSIBLE SIGNAL SOURCE ( "$" )
        I = NOWCH(8, KANDO)
        ITEM = 0
        IF (I .NE. '$') GO TO 720
        ITEM = "004000000000
        CALL NEXTCH(1, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE SIGNAL NAME, "," AND ":" RULED OUT
  720   IF (SIGREF(I) ) GO TO 730
C
C       ERROR
        CALL ERROR ('INVALID SIGNAL REFERENCE','BAD SIGNAL')
        GO TO 710
C
C       HERE WITH VALID NEW SIGNAL
  730   IF (PSIG .EQ. 0) GO TO 750
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (ATTRIB .AND. "040000000000) .NE. 0) GO TO 740
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 710
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
  740   CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
  750   PSIG = SIGID
        ATTRIB = ATTRIB .OR. ITEM
        PINFLAG = .TRUE.
        ITEM = THISPIN
        CALL LINK1
        CALL GETPIN(ITEM)
        ITEM = SPRING
        CALL GETPIN(ITEM)
        JPROM = JPROM + 1
        GO TO 710
  760   CALL ROPM
        GO TO 110
C
C       RENAME...
  800   CALL ANOTHER
        IF (.NOT. SIGSTR(ID(1) ) ) GO TO 130
        CALL ANOTHER
        IF (LPARSE(49) .NE. 1) GO TO 130
        CALL ANOTHER
        IF (.NOT. SIGSTR(PLGID(1) ) ) GO TO 130
C
C       GOT "RENAME **1 AS **2"
        IF (.NOT. SIGLOOK(ID(1) ) ) GO TO 110
        ITEM = SIGPIN
        SIGPIN = 0
        SIGID = 0
        SIGFLAG = .TRUE.
        CALL SIGFIND(PLGID(1) )
        IF ( (ITEM .AND. SIGPIN) .LT. 0) GO TO 890
        CALL ERENAME(ITEM)
        GO TO 110
C
C       HERE IF OLD AND NEW SIGNAL IS BUSSED...
  890   CALL ERROR('CANNOT MERGE TWO BUSSED SIGNALS','BOTH BUSSED')
        CALL SIGFIND(ID(1) )
        SIGPIN = ITEM
        SIGFLAG = .TRUE.
        CALL PUTSIG
        GO TO 120
C
C       SIGNAL...VERIFY "FORMAT"
  900   CALL ANOTHER
        IF (LPARSE(50) .NE. 1) GO TO 130
        CALL ANOTHER
        IF (.NOT. SFORMAT(I) ) GO TO 120
        GO TO 110
        END
        SUBROUTINE ERENAME(ITEM)
C
C       THIS ROUTINE PERFORMS THE RENAME PROCESS
C
C       ITEM IS THE HEAD OF THE ORIGINAL STRING
C
C       EXPECTS HASHCON TO POINT AT THE NEW SIGNAL NAME
C
        COMMON /HASHCON/ HASHCON, NBLOCK, THISSIG, SIGID, NEXTSIG,
     1  SIGPIN, SIGFLAG, DEFSIG(2), CDSN
        INTEGER HASHCON, THISSIG, SIGPIN, DEFSIG, CDSN
        DOUBLE PRECISION SIGID
        LOGICAL SIGFLAG
C
        COMMON /PINS/ BPID, NEXTPIN, LASTPIN, XPIN, YPIN, BPSIG,
     1  FROMSIG, TOSIG, PPPNT, SPRING, ATTRIB, DIST, CNGWORD, NULL,
     2  PINFLAG, THISPIN
        INTEGER BPID, FROMSIG, TOSIG, PPPNT, SPRING, ATTRIB,
     1  CNGWORD, THISPIN
        DOUBLE PRECISION BPSIG
        LOGICAL PINFLAG
C
        DATA MASK / "377777777777 /
C
C       DETERMINE IF THE NEW SIGNAL IS ALREADY DEFINED
        IF (SIGPIN .NE. 0) GO TO 150
C
C       NOT DEFINED...JUST GO AROUND AND CHANGE ALL THE NAMES
        SIGPIN = ITEM
        SIGFLAG = .TRUE.
C
C       DETERMINE IF BUSSED
        IF (.NOT. SIGPIN) GO TO 140
        ITEM = ITEM .AND. MASK
  100   CALL GETPIN(ITEM)
        BPSIG = SIGID
        PINFLAG = .TRUE.
C
C       CHANGE ALL SUB-STRING
  110   I = TOSIG
        IF ( (I .AND. MASK) .EQ. 0) GO TO 120
        CALL GETPIN(I)
        BPSIG = SIGID
        PINFLAG = .TRUE.
        GO TO 110
C
C       ANY SUBSTRINGS FIXED
  120   CALL GETPIN(ITEM)
        ITEM = FROMSIG .AND. MASK
        IF (ITEM .NE. 0) GO TO 100
C
C       DONE...EXIT
  130   CALL PUTSIG
        CALL PUTPIN
        RETURN
C
C       HERE FOR NON-BUSSED SIGNALS
  140   CALL GETPIN(ITEM)
        BPSIG = SIGID
        PINFLAG = .TRUE.
        ITEM = TOSIG
        IF (ITEM .NE. 0) GO TO 140
        GO TO 130
C
C       HERE IF NEW SIGNAL ALREADY EXISTS...SPECIAL HANDLING
C       NOTE...NO CHANCE OF EITHER SIGNAL BEING BUSSED
  150   CALL GETSIG(ITEM)
C
C       DETERMINE IF EXACT SIGNAL ON THIS PIN
        IF ( (ATTRIB .AND. "000020000000) .NE. 0) GO TO 160
C
C       NOT EXACT...CHANGE SIGNAL, REMEMBER .TO., LINK IN
        BPSIG = SIGID
        FROMSIG = 0
        I = TOSIG
        TOSIG = 0
        PINFLAG = .TRUE.
        CALL LINK1
        IF (TOSIG .EQ. 0) GO TO 130
        ITEM = I
        GO TO 150
C
C       HERE FOR EXACT SIGNAL STRING
  160   I = ITEM
        FROMSIG = 0
  170   J = ITEM
        ITEM = TOSIG
        BPSIG = SIGID
        PINFLAG = .TRUE.
        IF (ITEM .EQ. 0) GO TO 180
        CALL GETPIN(ITEM)
        IF ( (ATTRIB .AND. "000020000000) .NE. 0) GO TO 170
        GO TO 170
C
C       HAVE PARSED OUT EXACT SUBSTRING
        FROMSIG = 0
        PINFLAG = .TRUE.
        CALL GETPIN(J)
        TOSIG = 0
        PINFLAG = 0
C
C       SUBSTRING RUNS FROM I TO J, ITEM CONTAINS REMAINDER
  180   
C
C       IF (ITEM .NE. 0) GO TO 150
        GO TO 130
        END
