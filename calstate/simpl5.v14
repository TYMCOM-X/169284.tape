! EXTRA CODE GENERATORS 
LOCAL %ECG
BASE 0



!CG INTERFACE:
FIND P,%LD,%TVLIT,%OPND,%RLS,%EMANC,V(10),%FRE.X,%FRE.D.X,%CLR
FIND RT(10),%STK,%UTV,T(10),X(10),%TV,%OFF,%RECORD
FIND IMM,%SLAVE,%GEN.I,%DUP,%LP.OPND,%BINARY,%DIDDLE
FIND LASTBR,%GEN.O,%UNIFY,%UNARY,%ST,%COMP
DEF U.NG AS 8 ! NEGATION
DEF NEG.P(O) AS U.NG BAND X(O)#0
DEF NIL AS -2 ! NULL FIELD
DEF ANY AS -1 ! SELECT ANY REGISTER
DEF ALLB AS -1! SELECT ALL BITS
DEF DBL AS -2! SELECT A REGISTER PAIR
DEF KON AS 3 ! CONSTANT OPERAND
DEF REG AS 8 ! REGISTER OPERAND
DEF W.REL AS 5 ! OPERAND IN CORE
DEF XOPND AS BNOT 3 ! ALLOW ONLY @ AND ^ PENDING
DEF X.LO AS 1 ! LEAST REGISTER
DEF X.HI AS 15
DEF ELV(STK) AS STK(STK(0))

!GI INTERFACE:
DEF PRO.SZ AS 10
FIND TRN(10),%STKDEC
GLOBAL BP.STK(-1:10),RET.LOC(-1:PRO.SZ)

!HOST INTERFACE:
FIND %GEN,%K.SPLIT,%RLS.K,%WARN,%ERR,K.LH,K.RH,%TVKI,%ALLOC
FIND %BFWD
FIND CD.P,DT.P,%TVDKI,%LOC.MOD
DEF INT(I) AS V(I)
DEF REMINT AS INT(UTV+1)

DEF M.O AS 0
DEF M.LIT AS 1
DEF M.CD AS 2
DEF M.DT AS 3
DEF M.LNK AS 4

GLOBAL %FIELDS,%JMP,%S.TEMP,%JMP.LNK,%JMPI,%JMPV,%G.LD.1
GLOBAL %G.MAK.0,%EZ.BYT,%BYT.PTR,%MAKST,%LOD.DRS
GLOBAL %G.CND.AE,%G.ELS.AE,%G.RET,%G.SAVR
GLOBAL %TV.RET,%G.GO,%G.HALT,%G.EXIT,%LOD.RES,%LP.BPTR
GLOBAL %CL.FOR,%G.TTYIN,%CJMP.LNK,%G.PRHD,%G.SV.ARG
GLOBAL %G.ENTRY,%G.RPT.I,%G.RPT.L,%G.MOVE,%G.MOVE.F,%G.MOVE.T

LOCAL ARG.REG

%ECG
!***********************:
!
!      BIT PACKING AND UNPACKING
!
! UNPACK:  [K1,K2,K3]*[SW1,SW2,SW3]_AE
! PACK:    [K1,K2,K3]*[AE1,AE2,AE3]

!      STACK CONTENTS, P POINTS TO RIGHTMOST:

!UNPACK:  AE,K1,K2,K3,SW1,SW2,SW3
!PACK:       K1,K2,K3,AE1,AE2,AE3

! FOR UNPACKING, A COPY OF AE WILL BE PUT ON STACK, INC'ING P.

%FIELDS(PK) ! PK=0: UNPACKING      PK=1: PACKING

LOCAL KP,NF,AE,A1,A2,TSHF,SHF,I

KP_ELV(BP.STK); STKDEC(BP.STK) ! KP POINTS TO LAST CONSTANT
AE_ELV(BP.STK); STKDEC(BP.STK) ! AE POINTS TO AE FOR UNPACKING
IF NF_KP-AE#P-KP THEN ERR('FIELD MISCOUNT')

A1_FRE.D.X; IF PK=0 THEN SLAVE(A1)
SLAVE(A2_A1+1)

IF PK=0 THEN DO ! LOAD AE TO BE UNPACKED IF UNPACKING
       OFF(ANY,AE,XOPND); OPND(AE); GEN.I(OCT 200 !MOVE!,A2)
END
RT(A1)_RT(A2)_0

TSHF_0 ! TOTAL NUMBER OF BITS PACKED OR UNPACKED
WHILE DEC NF>=0 THEN DO
       SHF_INT(KP+IF PK=0 THEN -NF ELSE 0)
       IF NOT 0<=SHF<=36 THEN ERR('FIELD MISCOUNT')
       TSHF_TSHF+SHF
       IF PK=0 THEN DO
         I_P-NF
         IF T(I)=NIL THEN DO
           IF SHF>0 AND NF>0 THEN &
               GEN(M.LIT,OCT 242 !LSH!,A2,0,0,SHF)
         END ELSE DO
           GEN(M.LIT,OCT 201 !MOVEI!,A1,0,0,0)
           IF SHF>0 THEN GEN(M.LIT,OCT 246 !LSHC!,A1,0,0,SHF)
           OPND(I); GEN.I(OCT 202 !MOVEM!,A1)
           DIDDLE(I); RLS(I); RECORD(A1,I)
         END
       RLS(KP-NF)
       END ELSE DO
         EIF T(P)=KON AND INT(P)=0 THEN DO
           IF SHF>0 THEN GEN(M.LIT,OCT 242 !LSH!,A2,0,0,-SHF)
         END
         ELSE DO
           LD(A1,P,ALLB)
           IF SHF>0 THEN &
              [GEN(M.LIT,OCT 246 !LSHC!,A1,0,0,-SHF); RT(A1)_0]
         END
         UTV; RLS(KP); DEC KP
       END
END

IF TSHF#36 THEN ERR('FIELD MISCOUNT')
P_AE
IF PK=0 THEN [EMANC(A1);EMANC(A2)] ELSE TVLIT(REG,A2,0,0)
RETURN
END FIELDS

%S.TEMP(@L) ! PUT TOP OF STK IN A TEMP  
TV.LIT(W.REL,L_ALLOC(1),0,0); ST(P-1,P); DEC P; UTV
RETURN
END S.TEMP

%JMP(L)  
GEN(M.CD,OCT 254 !JRST!,0,0,0,L) 
RETURN
END JMP

%JMP.LNK(L)
GEN(M.LNK,OCT 254 !JRST!,0,0,0,L)
RETURN
END JMP.LNK

%JMPI(L) 
GEN(M.CD,OCT 254 !JRST!,0,0,1,L) 
RETURN
END JMPI  

%JMPV(D) 
LD(ANY,P,ALLB)
GEN(M.CD,OCT 254 !JRST!,0,V(P),1,LOC.MOD(CD.P,D))
UTV 
RETURN
END JMPV  

%G.LD.1
TVKI(1); LD(ANY,P,ALLB)
RETURN
END G.LD.1 

%G.MAK.0 
GEN(M.LIT,OCT 201 !MOVEI!,V(P),0,0,0); RT(V(P))_0  
RETURN
END G.MAK.0  

%G.CND.AE
LD(ANY,P,ALLB); EMANC(V(P)); T(P)_NIL
RETURN
END G.CND.AE 

%G.ELS.AE
LD(V(P-1),P,ALLB); DEC P; T(P)_REG
RETURN
END G.ELS.AE 


%G.PRHD ! GENERATE A PROC HEADER
G.SAVR(X.HI,ELV(RET.LOC)_ALLOC(1)); ARG.REG_X.LO
RETURN
END G.PRHD

%G.ENTRY ! GENERATE AN ENTRY POINT
G.SAVR(X.HI,ELV(RET.LOC)); ARG.REG_X.LO
RETURN
END G.ENTRY

%G.SV.ARG ! SAVE NEXT ARG
GEN(M.O,OCT 202 !MOVEM!,ARG.REG,0,0,P)
RECORD(ARG.REG,P); INC ARG.REG; RETURN
END G.SV.ARG

%G.RET
GEN(M.DT,OCT 254 !JRST!,0,0,1,ELV(RET.LOC))
RETURN
END G.RET 

%G.SAVR(R,L)
GEN(M.DT,OCT 202 !MOVEM!,R,0,0,L)
RETURN
END G.SAVR

%G.RPT.I	!MAKE REPEAT HEADER
LOCAL LOC.TMP
S.TEMP(@LOC.TMP)
RETURN

%G.RPT.L(LNK)
GEN(M.DT,OCT 375 !SOSGE!,0,0,0,LOC.TMP); BFWD(LNK); RETURN
END G.RPT.L
END G.RPT.I

%TV.RET ! RETURN AS AE OR SW
TV(W.REL); V(P)_ELV(RET.LOC); RETURN
END TV.RET

%G.GO
OFF(ANY,P,XOPND); OPND(P)
IF LASTBR=0 THEN GEN.I(OCT 254 !JRST!,0); UTV;RETURN
END G.GO

%G.HALT
GEN(M.LIT,OCT 254 !JRST!,4,0,0,0); RETURN
END G.HALT

%G.EXIT
GEN(M.LIT,OCT 47 !CALLI!,1,0,0,OCT 12 !EXIT!); RETURN
END G.EXIT

%LOD.RES ! RETURN VALUE
LD(X.LO,P,ALLB); RETURN
END LOD.RES

%LOD.DRS
	LD(X.LO,P-1,ALLB); LD(X.LO+1,P,ALLB); RETURN
END LOD.DRS

%CL.FOR
ERR('NO FOR')
END CL.FOR

%G.TTYIN
TV.LIT(REG,FRE.X,0,0); SLAVE(V(P))
GEN(M.LIT,OCT 51 !TTCALL!,4 !INCHWL!,0,0,V(P))
RETURN
END G.TTYIN

%CJMP.LNK(LINK,CREL) ! COMPARE TOP TWO ITEMS, BRANCE COND FWD, REMOVE 1

! BIT CRELS ARE:  -1 NOT BON  0 NOT BOFF  7 BOFF  8 BON
! ARITH CRELS ARE:  1 <  2 <=   3 =   4 #   5 >   6 >=
! PDP-10 EQUIVS : ! TABLE TC(1:6)[1,3,2,6,7,5]

LOCAL O1,O2,C,NC,I
TABLE TN(1:7)[7,2,5,4,3,6,1] !REVERSE SIGN OF PDP-10 TESTS!
	!IE. -A<0 => A>0 AND -B=0 => B=0 !
O2_P; O1_P-1
IF 0<CREL<7 THEN DO
CREL_TRN(CREL) ! FUNNY R IN GRAFF
IF T(O1)=KON OR T(O2)=REG THEN [O1<=>O2; CREL_TRN(CREL)]
C_TC(CREL); NC_TC(7-CREL)

IF T(O2)=KON AND INT(O2)=0 THEN DO
  IF NEG.P(O1) THEN [COMP(O1,U.NG); C_TN(C); NC_TN(NC)]
  OFF(ANY,O1,XOPND)
  IF T(O1)=REG AND X(O1)=0 THEN DO
       GEN(M.LNK,OCT 320 !JUMP!+C,V(O1),0,0,LINK)
  END ELSE DO
       OPND(O1)
       LP.OPND(O1); GEN.I(OCT 330 !SKIP!+NC,0)
       JMP.LNK(LINK)
  END
END ELSE DO
  OFF(ANY,O2,XOPND)
  LD(ANY,O1,ALLB)
  OPND(O2); I_IF IMM=0 THEN OCT 310 !CAM! ELSE OCT 300 !CAI!
  IMM_0; GEN.I(I+NC,V(O1))
  JMP.LNK(LINK)
END
END ELSE DO !NOT 0<CREL<7!
IF 0#CREL#7 THEN [UNARY(11 !BNOT!); CREL_ABS CREL-1]
LD(ANY,O2,ALLB)
I_IF CREL=0 THEN OCT 602 !TRNE! ELSE OCT 606 !TRNN!
IF T(O1)=KON THEN DO
	K.SPLIT(O1)
	IF K.RH=0 THEN INC I ELSE IF K.LH#0 THEN GO TD
	GEN(M.LIT,I,V(O2),0,0,K.LH BOR K.RH)
END ELSE DO
TD:	OFF(ANY,O1,XOPND); OPND(O1); LP.OPND(O1)
	GEN.I(I+8,V(O2))
END
JMP.LNK(LINK)
END !O<CREL<7!
UTV
RETURN
END CJMP.LNK

%G.MOVE(ALLFLAG)
EIF ALLFLAG#0 THEN [UNARY(12 !NEG!); UNIFY(OCT 504 !HRL!)]
ELSE LD(ANY,P,ALLB)
RETURN

%G.MOVE.F
EIF ALLFLAG#0 THEN LD(ANY,P,ALLB)
ELSE UNIFY(OCT 504 !HRL!)
RETURN
END G.MOVE.F

%G.MOVE.T
LD(ANY,P-1,ALLB)
LD(ANY,P-2,ALLB)
IF ALLFLAG#0 THEN DO
	GEN.O(OCT 540 !HRR!,P-2,P)
	GEN(M.LIT,OCT 202 !MOVEM!,V(P-1),V(P-2),0,0)
	GEN(M.CD,OCT 253 !AOBJN!,V(P-2),0,0,LOC.MOD(CD.P,-1))
END ELSE DO
	GEN.O(OCT 540 !HRR!,P-1,P)
	GEN.O(OCT 270 !ADD!,P-2,P)
        GEN(M.LIT,OCT 303 !CAILE! ,V(P-2),V(P-1),0,0) !SKIP BLT IF COUNT<=0
	GEN(M.LIT,OCT 251 !BLT!,V(P-1),V(P-2),0,-1)
END
UTV; UTV; UTV
RETURN
END G.MOVE.T
END G.MOVE

%MAKST
OFF(ANY,P,ALLB); UTV; RETURN
END MAKST
!*************
!
! BYTE REFERENCE GENERATERS
!
!*************

%EZBYT(INS,A,O)
LP.OPND(O)  
GEN.I(INS,A); RETURN
END EZBYT

%BYT.PTR(BYTSIZ) ! CREATE BYTE POINTER AS FOR CHPT(P-1,P).  
LOCAL BYPW,A,Q,R
BYPW_36/BYTSIZ 
OFF(ANY,P-1,XOPND) ! CLEAN UP ADDRESS  
IF T(P)#KON THEN DO 
	LD(DBL,P,ALLB); SLAVE(R_(Q_V(P))+1)
	GEN(M.LIT,OCT 231 !IDIVI!,Q,0,0,BYPW)
	GEN(M.CD,OCT 325 !JUMPGE!,R,0,0,LOC.MOD(CD.P,3))
	GEN(M.LIT,OCT 360 !SOJ!,Q,0,0,0)
	GEN(M.LIT,OCT 271 !ADDI!,R,0,0,BYPW)
	TVLIT(REG,R,0,0); TVKI(-(BYTSIZ SHL 12))
	BINARY(HEX 2 !*!); SLAVE(R_V(P)); UTV
	GEN(M.LIT,OCT 271 !ADDI!,R,0,0,[BITS.PER.WORD-18,6,6,6]* &
		[0,36-BYTSIZ,BYTSIZ,0])
	BINARY( HEX 00 !ADD!)
	GEN(M.LIT, OCT 504 !HRL!,V(P),0,0,R)
	EMANC(R)
END ELSE DO 
       [Q;R]_REMINT DIVMOD BYPW  
       IF R<0 THEN [Q_Q-1; R_BYPW+R]
       R_36-BYTSIZ*(1+R); LD(ANY,P,ALLB)  
       K.LH_[BITSPERWORD-18,6,6,6]*[0,R,BYTSIZ,0]
       TVDKI(K.LH,0)
       TVKI(ABS Q)
       BINARY(IF Q<0 THEN HEX 01 !SUB! ELSE HEX 00 !ADD!)
       BINARY(HEX 00 !ADD!)
END
RETURN
END BYT.PTR 

%LP.BPTR(HWS) !CREATE A LEFT PART CHPT OR HWPT
LOCAL AC
SLAVE(AC_FRE.D.X); TV.LIT(REG,AC,0,0)
GEN.O(OCT 200 !MOVE!,P,P-3)
GEN.O(OCT 552 !HRRZM!,P,P-2); DIDDLE(P-2)
GEN(M.LIT,OCT 554 !HLRZ!,AC,0,0,AC)
GEN(M.LIT,OCT 275 !SUBI!,AC,0,0,IF HWS=1 THEN OCT 222200 &
	ELSE OCT 350700)
GEN(M.LIT,OCT 231 !IDIVI!,AC,0,0,IF HWS=1 THEN OCT 220000 &
	ELSE OCT 70000)
GEN.O(OCT 212 !MOVNM!,P,P-1); DIDDLE(P-1)
UTV; UTV; UTV; TV(NIL)
RETURN
END LP.BPTR

END ECG
    