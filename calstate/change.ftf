C       CHANGE.FTF
        SUBROUTINE CHANGE(VALID, REPEAT)
C
C       THIS IS THE CHANGE FUNCTIONAL UNIT
C
C       IT PERFORMS ALL THE PROCESSING ASSOCIATED WITH THE CHANGE
C       SPECIFICATION.
C
        INTEGER REPEAT, OUTTEST, ID1(3), ID2(3), ID3(4)
        LOGICAL VALID, FIRSTIM
        DATA FIRSTIM / .TRUE. /
C
C
        COMMON /FILES/ XFILE(7), YFILE(7), SFILE(7), PFILE(7), FLIB(7),
     1  PIDFILE(7), PPFILE(7)
        INTEGER XFILE, YFILE, SFILE, PFILE, PIDFILE, PPFILE
C
        COMMON /PRINTER/ PRINTER(9)
        INTEGER PRINTER
C
        COMMON /HASHCON/ HASHCON, NBLOCK, THISSIG, SIGID, NEXTSIG,
     1  SPINPNT, SIGFLAG
        DOUBLE PRECISION SIGID
        INTEGER HASHCON, THISSIG, SPINPNT
        LOGICAL SIGFLAG
C
        COMMON /PINS/ PID, BPCORAL(2),XPINS, YPINS, BPSIG, FROM, TO,
     1  PLGPIN, PLGRING, CODES, DIST, CNGWORD(2), PINFLAG, THISPIN
        DOUBLE PRECISION BPSIG
        INTEGER PID, BPCORAL, FROM, TO, PLGPIN, PLGRING, CODES,
     1  CNGWORD, THISPIN
        LOGICAL PINFLAG
C
        COMMON /CPGLOB/ KURSOR, LINSIZ, NATCH, INLINE(270), ISTTY,
     1  HUSH, UNCOLA, IPROMP, IDFILE(5)
        LOGICAL ISTTY, HUSH, UNCOLA
C
        COMMON /OWNPRM/ PRMPCP, UNPROMP, JPROM
        LOGICAL PRMPCP, UNPROMP
C
        INTEGER BIT, MASK
        DATA BIT, MASK / "400000000000, "377777777777 /
C
    1   FORMAT (' REMOVE PLUG ',3A5,' FROM PIN ',3A5 //)
    2   FORMAT (' PLACE PLUG ',3A5,' AT PIN ',3A5 //)
C
C       EXIT IF VALIDITY CHECK
        IF (.NOT. VALID) GO TO 100
C
C       CLOSE THE FILES
        CALL WCLOSE(XFILE(1) )
        CALL WCLOSE(YFILE(1) )
        CALL WCLOSE(SFILE(1) )
        CALL WCLOSE(PFILE(1) )
        CALL WCLOSE(PIDFILE(1) )
        CALL WCLOSE(PPFILE(1) )
        FIRSTIM = .TRUE.
        RETURN
C
C       NOT VALIDITY CHECKING...DETERMINE IF FIRST ENTRY
  100   IF (.NOT. FIRSTIM) GO TO 110
        FIRSTIM = .FALSE.
        CALL WOPEN(XFILE(1) )
        CALL WOPEN(YFILE(1) )
        CALL WOPEN(SFILE(1) )
        CALL WOPEN(PFILE(1) )
        CALL WOPEN(PIDFILE(1) )
        CALL WOPEN(PPFILE(1) )
C
C       HERE ON NON-VALIDITY CHECKING...GET A LINE, DETERMINE WHAT TO DO
  110   UNCOLA = .FALSE.
C
C       GET A LINE AND TEST IT
  120   CALL PROMPT
        IF (.NOT. FETCHL(I) ) GO TO 120
C
C       DETERMINE IF THIS IS A VALID COMMAND
  130   I = LPARSE(30)
        IF (I .EQ. 0) GO TO 120
        IF (I .LT. 0) GO TO 140
        IF (I .GT. 4) GO TO 140
        IF (PRINTER(4) )  GO TO (300, 300, 300, 1100), I
C
C       PRINTER NOT YET ASSIGNED...BITCH
        CALL ERROR('PRINT FILE NOT YET DEFINED','NO PRINT FILE')
        GO TO 130
C
C       UNRECOGNIZABLE...SEE IF ANYONE ELSE KNOWS IT
  140   CALL LISTEST
        GO TO 130
C
C       HERE IF ERROR
  150   CALL ERROR('SYNTAX ERROR IN COMMAND', 'SYNTAX')
        GO TO 130
C
C       INVALID REFERENCE
  160   CALL ERROR('INVALID SIGNAL REFERENCE','BAD SIGNAL')
        GO TO 130
C
C       SIGNAL NOT THERE
  170   CALL ERROR('SIGNAL NOT ON THIS PIN','NOT THERE')
        GO TO 130
C
C       ALREADY THERE
  180   CALL ERROR('PIN ALREADY HAS SIGNAL','PIN IN USE')
        GO TO 130
C
C       BUSSED PIN
  190   CALL ERROR('SIGNAL BUSSED TO THIS PIN','BUSSED')
        GO TO 130
C
C       SIGNAL NOT IN USE
  200   CALL ERROR('SIGNAL NOT IN USE','NEW SIGNAL')
        GO TO 130
C
C       INVALID PLUG DESCRIPTION
  210   CALL ERROR ('INVALID PLUG DESCRIPTION','BAD PLUG ID')
        GO TO 130
C
C       PLUG NOT THERE
  220   CALL ERROR ('THIS PLUG NOT ON THIS PIN','PLUG NOT THERE')
        GO TO 130
C
C       INVALID PIN REFERENCE
  230   CALL ERROR('INVALID PIN REFERENCE','BAD PIN ID')
        GO TO 130
C
C
C
C
C       HERE FOR "MOVE"/"ADD"/"REMOVE"...CHECK
C               "PLUG"/"SIGNAL"/"EXACT"
  300   J = LPARSE(31)
        GO TO (150, 150, 320, 320, 310, 150), J+2
C
C       SECOND WORD WAS "EXACT"...PROVE FIRST WAS "ADD", NEXT "SIGNAL"
  310   IF (I .NE. 2) GO TO 150
        IF (LPARSE(31) .NE. 2) GO TO 150
C
C       NOW DETERMINE IF PLUG OR SIGNAL FUNCTION
  320   L = 3*J + I - 3
C
C       L HAS THE FOLLOWING VALUES, FOR CORRESPONDING COMMANDS:
C
C       L       COMMAND
C       1       MOVE PLUG
C       2       ADD PLUG
C       3       REMOVE PLUG
C       4       MOVE SIGNAL
C       5       ADD SIGNAL
C       6       REMOVE SIGNAL
C       7       -
C       8       ADD EXACT SIGNAL
C
C
C
        GO TO (400, 500, 600, 700, 800, 900, 150, 1000, 150), L
C
C
C
C       "MOVE PLUG"
  400   IF (.NOT. PACK(ID1(1), 15, 0) ) GO TO 210
        IF (LPARSE(32) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (PLGPIN .EQ. 0) GO TO 220
        CALL PLGID(PLGPIN, ID3(1) )
        IF (ID1(1) .NE. ID3(1) ) GO TO 220
        IF (ID1(2) .NE. ID3(2) ) GO TO 220
        IF (ID1(3) .NE. ID3(3) ) GO TO 220
        N1 = THISPIN
        IF (LPARSE(27) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        N2 = THISPIN
C
C       "MOVE PLUG .PLGID. FROM .BPID. TO .BPID."
        IF (.NOT. PLUGSOC(N2, ID1(1) ) ) GO TO 130
        CALL GETPIN(N1)
        CALL UNPLUG
        CALL BPID(N1, ID2(1) )
        WRITE (PRINTER(1), 1), ID1, ID2
        CALL LINE
        CALL LINE
        CALL LINE
        CALL BPID(N2, ID2(1) )
        WRITE (PRINTER(1), 2), ID1, ID2
        CALL LINE
        CALL LINE
        CALL LINE
        GO TO 110
C
C
C
C
C       "ADD PLUG"
  500   IF (.NOT. PACK(ID1(1), 15, 0) ) GO TO 210
        IF (LPARSE(27) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        N1 = THISSOC
C
C       "ADD PLUG .PLGID. TO .BPID."
        IF (.NOT. PLUGSOC(N1, ID1(1) ) ) GO TO 130
        CALL BPID(N1, ID2(1) )
        WRITE (PRINTER(1), 2), ID1, ID2
        CALL LINE
        CALL LINE
        CALL LINE
        GO TO 110
C
C
C
C
C       REMOVE PLUG
  600   IF (.NOT. PACK(ID1(1), 15, 0) ) GO TO 210
        IF (LPARSE(32) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        CALL PLGID(PLGPIN, ID3(1) )
        IF (ID1(1) .NE. ID3(1) ) GO TO 220
        IF (ID1(2) .NE. ID3(2) ) GO TO 220
        IF (ID1(3) .NE. ID3(3) ) GO TO 220
        IF (LPARSE(27) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (PLGPIN .EQ. 0) GO TO 220
        N1 = THISPIN
C
C       "REMOVE PLUG .PLGID. FROM .BPID."
        CALL UNPLUG
        CALL BPID(N1, ID2(1) )
        WRITE (PRINTER(1), 1), ID1, ID2
        CALL LINE
        CALL LINE
        CALL LINE
        GO TO 110
C
C
C
C
C       "MOVE SIGNAL"...CHECK IT OUT
  700   IF (.NOT. SIGREF(I) ) GO TO 160
        IF (SPINPNT .EQ. 0) GO TO 200
        IF (LPARSE(32) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (BPSIG .NE. SIGID) GO TO 170
        IF (PLGRING .EQ. 0) GO TO 190
        N1 = THISPIN
        IF (LPARSE(27) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (BPSIG .NE. 0) GO TO 180
        N2 = THISPIN
C
C       "MOVE SIGNAL .SIGID. FROM .BPID. TO .BPID."
        CALL GETPIN(N1)
        I = FROM
        J = TO
        CALL UNWIRE
        IF (J .EQ. 0) GO TO 710
        CALL GETPIN(J)
        FROM = (FROM .AND. BIT) .OR. N2
        PINFLAG = .TRUE.
  710   IF (I .EQ. 0) GO TO 720
        K = I .AND. MASK
        CALL GETPIN(K)
        TO = N2
        PINFLAG = .TRUE.
        GO TO 730
C
C       HERE IF LEADING PIN IN LIST
  720   SPINPNT = N2
        SIGFLAG = .TRUE.
        CALL PUTSIG
C
C       HERE FOR BOTH CASES
  730   CALL GETPIN(N2)
        FROM = I
        TO = J
        BPSIG = SIGID
        PINFLAG = .TRUE.
        CALL PUTPIN
        GO TO 110
C
C
C
C
C       "ADD SIGNAL"...CHECK IT OUT
  800   IF (.NOT. SIGREF(I) ) GO TO 160
C
C       DETERMINE IF "BEFORE"/"AFTER"
        IBEAFT = LPARSE(33)
        IF (IBEAFT .EQ. 0) GO TO 150
        IF (IBEAFT .GT. 2) IBEAFT = -1
        IF (IBEAFT) GO TO 810
C
C       GOT SPECIAL CASE...VERIFY IT
        IF (SPINPNT .EQ. 0) GO TO 200
        IF (.NOT. BPVFY(I) ) GO TO 230
        IF (SIGID .NE. BPSIG) GO TO 170
        IF (PLGRING .EQ. 0) GO TO 190
C
C       PROCESSED...LOOK FOR ":"
  810   IF (LPARSE(43) .NE. 1) GO TO 150
C
C       "ADD SIGNAL .SIGID. [BEFORE/AFTER .BPID.]"
        CALL SOPM
  820   UNPROMP = .FALSE.
  830   CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 880
C
C       NOT ":"...ELIMINATE ","
        IF (LPARSE(42) .EQ. 1) GO TO 830
C
C       HERE FOR ELEMENT...DETERMINE IF SIGNAL SOURCE
        I = NOWCH(4, KANDO)
        ITEM = 0
        IF (I .NE. '$') GO TO 840
        ITEM = "004000000000
        CALL NEXTCH(5, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE PIN NAME, "," AND ":" RULED OUT..."$" EXAMINED
  840   IF (BPVFY(.FALSE.) ) GO TO 850
C
C       INVALID PIN DESCRIPTION
        CALL ERROR ('INVALID PIN DESCRIPTION','BAD PIN ID')
        GO TO 830
C
C       HAVE A VALID PIN...DETERMINE IF ALREADY HAS A SIGNAL
  850   IF (BPSIG .EQ. 0) GO TO 870
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (CODES .AND. "040000000000) .NE. 0) GO TO 860
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 830
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
  860   CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
  870   BPSIG = SIGID
        CODES = CODES .OR. ITEM
        PINFLAG = .TRUE.
        CALL LINK1
        JPROM = JPROM + 1
        GO TO 820
C
C       DONE
  880   CALL ROPM
        GO TO 110
C
C
C
C
C       "REMOVE SIGNAL"...CHECK IT OUT
  900   IF (.NOT. SIGREF(I) ) GO TO 160
        IF (SPINPNT .EQ. 0) GO TO 200
        IF (LPARSE(32) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (BPSIG .NE. SIGID) GO TO 170
        IF (PLGRING .EQ. 0) GO TO 190
C
C       "REMOVE SIGNAL .SIGID. FROM .BPID."
        CALL UNWIRE
        GO TO 110
C
C
C
C
C       "ADD EXACT SIGNAL"...CHECK IT OUT
 1000    IF (.NOT. SIGREF(I) ) GO TO 160
C
C       DETERMINE IF "BEFORE"/"AFTER"
        IBEAFT = LPARSE(33)
        IF (IBEAFT .EQ. 0) GO TO 150
        IF (IBEAFT .GT. 2) IBEAFT = -1
        IF (IBEAFT) GO TO 1010
C
C       GOT SPECIAL CASE...VERIFY IT
        IF (SPINPNT .EQ. 0) GO TO 200
        IF (.NOT. BPVFY(I) ) GO TO 230
        IF (SIGID .NE. BPSIG) GO TO 170
        IF (PLGRING .EQ. 0) GO TO 190
C
C       PROCESSED...LOOK FOR ":"
 1010    IF (LPARSE(43) .NE. 1) GO TO 150
C
C       ADD EXACT SIGNAL .SIGID. [BEFORE/AFTER .BPID.]"
        CALL SOPM
        K1 = 0
        K2 = 0
        UNPROMP = .FALSE.
 1020    CALL ANOTHER
        IF (LPARSE(43) .EQ. 1) GO TO 1080 
C
C       HERE FOR ELEMENT
        IF (LPARSE(42) .EQ. 1) GO TO 1020 
        I = NOWCH(4, KANDO)
        ITEM = "000020000000
        IF (I .NE. '$') GO TO 1030 
        ITEM = "004020000000
        CALL NEXTCH(5, KANDO)
        CALL ANOTHER
C
C       HAVE A PROBABLE PIN NAME, "," AND ":" RULED OUT
 1030    IF (BPVFY(.TRUE.) ) GO TO 1040 
C
C       INVALID PIN DESCRIPTION
        CALL ERROR ('INVALID PIN DESCRIPTION','BAD PIN ID')
C
C       HAVE A VALID PIN NAME...TEST IF SIGNAL ALREADY ASSIGNED
 1040    IF (BPSIG .EQ. 0) GO TO 1060 
C
C       SIGNAL ALREADY ASSIGNED TO PIN...IS IT DEFAULT?
        IF ( (CODES .AND. "040000000000) .NE. 0) GO TO 1050 
C
C       SIGNAL ALREADY ON PIN..BITCH
        CALL ERROR('SIGNAL ALREADY ON PIN','PIN WIRED')
        GO TO 1020 
C
C       PIN CONTAINS DEFAULT SIGNAL...DELETE IT
 1050    CALL UNWIRE
C
C       NOW LINK THE PIN INTO THE LIST
 1060    JPROM = JPROM + 1
        BPSIG = SIGID
        CODES = CODES .OR. ITEM
        FROM = K2
        PINFLAG = .TRUE.
        IF (K1 .NE. 0) GO TO 1070 
C
C       FIRST TIME AROUND...SET IT UP
        K1 = THISPIN
        K2 = THISPIN
        GO TO 1020 
C
C       SUCCESSIVE PINS...
 1070    I = THISPIN
        CALL GETPIN(K2)
        K2 = I
        TO = I
        PINFLAG = .TRUE.
        GO TO 1020 
C
C       DONE
 1080    CALL ROPM
        IF (K1 .EQ. 0) GO TO 110
        CALL LINK2(K1, K2)
        GO TO 110
C
C
C
C
C       HERE FOR "TRANSFER"...GET "SIGNAL"
 1100   IF (LPARSE(31) .NE. 2) GO TO 150
        IF (.NOT. SIGREF(I) ) GO TO 160
        IF (SPINPNT .EQ. 0) GO TO 200
        IF (LPARSE(32) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (BPSIG .NE. SIGID) GO TO 170
        IF (PLGRING .EQ. 0) GO TO 190
        N1 = THISPIN
        IF (LPARSE(27) .NE. 1) GO TO 150
        IF (.NOT. BPVFY(.TRUE.) ) GO TO 130
        IF (BPSIG .NE. 0) GO TO 180
        N2 = THISPIN
C
C       "TRANSFER SIGNAL .SIGID. FROM .BPID. TO .BPID."
        CALL GETPIN(N1)
        CALL UNWIRE
        CALL GETPIN(N2)
        BPSIG = SIGID
        PINFLAG = .TRUE.
        CALL LINK1
        GO TO 110
        END
        SUBROUTINE UNPLUG
C
C       THIS ROUTINE REMOVES A PLUG FROM A SOCKET, RELINKS THE SOCKET
C       RING.  THE CURRENT PIN IS TAKEN AS PART OF THE APPROPRIATE
C       PLUG RING.
C
        COMMON /PINS/ BPID, NEXTPIN, LASTPIN, XPIN, YPIN, BPSIG(2),
     1  FROMSIG, TOSIG, PPPNT, SPRING, ATTRIB, DIST, CNGWORD, NULL,
     2  PINFLAG, THISPIN
        INTEGER BPID, BPSIG, FROMSIG, TOSIG, PPPNT, SPRING, ATTRIB,
     1  CNGWORD, THISPIN
        LOGICAL PINFLAG
C
C       SAVE THISPIN, THEN COMMENCE UNPLUGGING
        IT = THISPIN
  100   PPPNT = 0
        I = ATTRIB .AND. "040000000000
        ATTRIB = ATTRIB .AND. "604020000000
        PINFLAG = .TRUE.
        IF (I .EQ. 0) GO TO 110
C
C       THIS PIN HAS A DEFAULT SIGNAL...DELETE IT
        I = THISPIN
        CALL UNWIRE
        CALL GETPIN(I)
C
C       COMPLETE IT
  110   I = SPRING
        CALL GETPIN(I)
        IF (I .NE. IT) GO TO 100
C
C       PLUG REMOVED FROM SOCKET...LOCATE ALL NON-PLUG PINS
  120   IF (PPPNT .NE. 0) GO TO 130
        IF (SPRING .EQ. 0) GO TO 130
C
C       GOT ONE...FLAG IT
        ATTRIB = ATTRIB .OR. "1
        PINFLAG = .TRUE.
  130   I = NEXTPIN
        CALL GETPIN(I)
        IF (I .NE. IT) GO TO 120
C
C       ALL MARKED...NOW RELINK THEM
        J = THISPIN
  140   I = NEXTPIN
        IF (I .EQ. IT) GO TO 150
        CALL GETPIN(I)
        IF ( (ATTRIB .AND. "1) .EQ. 0) GO TO 140
  150   CALL GETPIN(J)
        ATTRIB = ATTRIB .AND. "777777777776
        SPRING = I
        PINFLAG = .TRUE.
        J = I
        CALL GETPIN(I)
        IF (I .NE. IT) GO TO 140
C
C       DONE...EXIT
        RETURN
        END
 