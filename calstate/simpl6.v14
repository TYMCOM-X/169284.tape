BASE 0
!SYMBOL TABLE STUFF
FIND %INITSYMPACK,%NEW.SYM.TBL,%SYMPOS,%GET.SYM,%PRINT,%RETLIN
FIND %DMP,%D.NXT.SYM,SYM.BUF(64),%ERROR,%INITCOR
FIND %SETERR,%BIO,%WIO,%CIO,%OPEN,%CLOSE
GLOBAL %PRINT.LINE.CR,%TABGEN

LOCAL STBL,RFDFTBL,%SYMTB,%INTS,%MVTSM
LOCAL EOD:,EORDF:,%MSFLD

DEF MSPC(X) AS PRINT(X)
DEF MESPRT(X) AS PRINT(X); RETLIN

LOCAL %STRINP,%SCOMP,%ENTDEF,%ENTREF,%VAL
LOCAL PTR,PTR1,FNI,FNO  !I/O THINGS
LOCAL BUF(100)     !INPUT BUFFER
LOCAL VALNUM,BASEV,BLN,TPOS   !USED TO FILL FINAL TABLES
LOCAL OFFSET
LOCAL FLD(1:5)     !FIELDS FROM INPUT FILE CONTAINS CHPTS
LOCAL I,J,EOFR:,%PVAL
LOCAL FNL,%ELST,%SLST,%LST,%NUM3,BNUM,LCNT
LOCAL LPNT,LBUF(100)
TABLE TENS(6)[1,10,100,1000,10000,100000,1000000]



DEF MAX.TAB AS 700 !SIZE OF TABLE SHOULD AGREE WITH PARSER
LOCAL V(1:MAX.TAB),D(1:MAX.TAB),SUC(1:MAX.TAB),ALT(1:MAX.TAB)
LOCAL RULE(1:MAX.TAB) !TABLES FOR PARSER
DEF BLOCK.SIZE AS 256
DEF RFN.SZ AS 10
!REFDEF STACK HAS RIGHT RFN.SZ BITS AS A NUMBER WHICH
!IS A LINKED LIST THROUGH D OR A DEF DEPENDING ON NEXT BIT
!A 1 IS A DEF A 0 A REF
DEF MAX.ER AS 400
LOCAL ERTAB(1:MAX.ER),ERPT,PTRE



!ALL OF THESE SHOULD AGREE WITH THE PARSER DEFS
DEF ID.VAL AS 1    !ENTRY FOR AN ID
DEF CON.VAL AS 2   !FOR A CON
DEF QUOT.VAL AS 3  !FOR A ' OR "
DEF DOL.VAL AS 4   !FOR A $
DEF DEF.VAL AS 5   !FOR THE TERMINAL SYMBOL DEF
DEF COM.VAL AS 6   !FOR ,
DEF LP.VAL AS 7    !FOR (
DEF RP.VAL AS 8    !FOR )
DEF UDF.VAL AS 9   !FOR UNDEF
DEF ENDM.VAL AS 10    !FOR ENDM

!DEFINTIONS OF THINGS FOR THE V TABLE
DEF VL.CMP AS 4    !COMPILER OP
DEF VL.DEF AS 1    !DEFINITION
DEF VL.ERR AS 3    !ERROR MESSAGE
DEF VL.SIG AS 5    !SIGMA
DEF VL.FENCE AS 6	!FENCE
DEF VL.VAL AS 2    !A RESERVED WORD OR SYMBOL (VALUE)
DEF ALT.SIG AS 1   !SIGMA IN SUC OR ALT TABLES

!SIZE PARAMETERS FOR THE RULE TABLE
DEF R.POS.LIN AS 10
DEF R.POS.BLK AS 18
DEF R.SIZ.RULE AS 10
DEF R.SIZ.LIN AS 8
!THE RULE TABLE HAS THREE FIELDS
!1: BLOCK NUMBER
!2: LINE NUMBER
!3: RULE TYPE



!THIS IS MACHINE DEPENDENT*********************
DEF CR AS CAR.RET
DEF CHR.WORD AS CHARS.PER.WORD



LOCAL BADIO:
BADIO:   MESPRT('BAD IO') ; EXIT
%TABGEN
LOCAL OPRI:,OPRO:,OPRL:
OPRI:   MSPC('GRAPH FROM: ')
\\-> OPRI   !START AT OPRI
       FNI _OPEN(STRINP(0),1,7,OPRI); SETERR(FNI,EOFR)
OPRO:   MSPC('TABLES TO: ')
       FNO _OPEN(STRINP(0),2,36,OPRO)
OPRL:   MSPC ('LIST TO: ')

       PTR_CHPT(BUF,-1)
       I_STRINP(0)
       IF NCHV I=E.O.LIT THEN FNL_-1 &
       ELSE  FNL _OPEN(PTR,2,7,OPRL)

         BLN_2 SHL R.POS.BLK; VALNUM_ENDM.VAL; TPOS_2
!BLN IS THE BLOCK AND LINE PART OF THE RULE ENTRY
!TPOS IS THE LOCATION TO PUT THINGS IN THE TABLES
!VALNUM IS THE HIGHEST TOKEN NUMBER USED SO FAR

         INITCOR; INITSYMPACK; STBL_NEW.SYM.TBL(2,0)
         RFDFTBL_NEW.SYM.TBL(2,0)
         INTS('ID',ID.VAL); INTS('CON',CON.VAL)
         INTS('"',QUOT.VAL); INTS('$',DOL.VAL)
         INTS('DEF',DEF.VAL); ERPT_1
         INTS(',',COM.VAL); INTS('(',LP.VAL)
         INTS('UNDEF',UDF.VAL); INTS('ENDM',ENDM.VAL)
         INTS(')',RP.VAL); BNUM_1
!READ IN A NEW BLOCK HEADING
NXB:     PTR_STRINP(FNI); OFFSET_2
         SLST; LST('    ');NUM3(INC BNUM); LST('    ')
         LST(BUF); ELST
!PLACE TO START LINE NUMBERING
COM:     EIF J_NCHV(PTR)=$, THEN [CHV(PTR)_E.O.LIT; &
              OFFSET_VAL(PTR)]
         !IF A COMM IN LINE, NUMBER WHICH FOLLOWS IS
         !THE NUMBER TO START NUMBERING FROM
         FIF J#E.O.LIT THEN GO COM !0 IS END OF LINE
         IF J=$, THEN WHILE E.O.LIT#J_NCHV(PTR)#$, THEN NULL
         EIF J=$, THEN ENTDEF(BUF,TPOS+VAL(PTR)-OFFSET)
         ELSE ENTDEF(BUF,TPOS) !PUT IN REF-DEF TABLE
         BASEV_TPOS !FIRST LINE ENTRY THIS BLOCK
         BYT(BLN,R.SIZ.LIN,R.POS.LIN)_OFFSET-1 !LINE NUMBER

!READ BLOCK BODY
RBLK:    PTR_STRINP(FNI)
         IF CH(BUF)=E.O.LIT THEN [BLN_BLN+1 SHL R.POS.BLK; &
              SLST; LST(' '); ELST; GO NXB]
         !BLANK LINE IS EOBLOCK
         BLN_BLN+1 SHL R.POS.LIN !INC LINE NUMBER
         SLST;NUM3(TPOS-BASEV+OFFSET);LST(',')
         NUM3(TPOS);LST('    ');LST(BUF);ELST
         IF SCOMP(PTR,',,,')=0 THEN [INC TPOS; GO RBLK]
!NULL LINE

         FLD(1)_PTR; I_1 !SET TO READ FIELDS
NXFLD:   IF J_NCHV(PTR)=E.O.LIT THEN GO LFLD !DONE
         IF J#$, THEN GO NXFLD; CHV(PTR)_E.O.LIT
         IF SCOMP(FLD(I),"'")=0 THEN DO
              CHV(PTR)_$,; NCHV(FLD(I)); NCHV(PTR)_E.O.LIT
              NCHV(PTR)_E.O.LIT !',' IS USED FOR ,
              END
         FLD(INC I)_PTR
         IF I=2 AND SCOMP(FLD(1),'E')=0 THEN GO ERRORM
         GO NXFLD

LFLD:    IF I#5 THEN [MSFLD(I); GO RBLK]
         EIF SCOMP(FLD(1),'C')=0 THEN [V(TPOS)_VL.CMP; &
              D(TPOS)_VAL(FLD(2))]
	ORIF SCOMP(FLD(1),'F')=0 THEN DO
		V(TPOS)_VL.FENCE
		IF J_VAL(FLD(2))=0 THEN [&
	ERROR('FENCE NODE MUST HAVE DEF FIELD'); GO RBLK]
		GO FENLK
	END
         ORIF SCOMP(FLD(1),'S')=0 THEN [V(TPOS)_VL.SIG; &
		D(TPOS)_VAL(FLD(2))]
         ORIF SCOMP(FLD(2),'E')=0 THEN [ENTREF(FLD(1),TPOS); &
              V(TPOS)_VL.DEF]
         ORIF J_VAL(FLD(2))=0 THEN [V(TPOS)_VL.VAL;&
              D(TPOS)_SYMTB(FLD(1))]
         ELSE DO
              V(TPOS)_VL.DEF
FENLK:		 D(TPOS)_J+BASEV-OFFSET
              IF CH(BUF)#E.O.LIT THEN ENTDEF(BUF,J+BASEV-OFFSET)
              END

!NOW FOR ALT TABLE
         EIF SCOMP(FLD(3),'S')=0 THEN J_ALT.SIG
         FIF J_VAL(FLD(3))#0 THEN J_J+BASEV-OFFSET
         ALT(TPOS)_J

!NOW SUC TABLE
         EIF SCOMP(FLD(4),'S')=0 THEN J_ALT.SIG
         FIF J_VAL(FLD(4))#0 THEN J_J+BASEV-OFFSET
         SUC(TPOS)_J

!NOW RULE
	J_NCHV(FLD(5))
	EIF J=$I THEN J_OCT 03
	ORIF J=$B THEN J_OCT 10
	ORIF J=$U THEN J_OCT 21
	ORIF J=$R THEN J_OCT 30
	ORIF J=$O THEN J_OCT 01
	ORIF J=$P THEN J_OCT 40
	ORIF $0<=J<=$9 THEN J_J-$0
	ELSE J_0
	RULE(TPOS)_BLN BOR J
NTPOS:   IF INC TPOS>MAX.TAB THEN ERROR ('PARSER TABLE OVERFLOW')
         GO RBLK

ERRORM:  V(TPOS)_VL.ERR; D(TPOS)_ERPT
         IF J_VAL(PTR)>1 THEN J_J+BASEV-OFFSET; SUC(TPOS)_J
         WHILE NCHV(PTR)#$, THEN NULL
         PTRE_CHPT(@ERTAB(ERPT),-1); J_0
         WHILE NCHV(PTRE)_NCHV(PTR)#E.O.LIT THEN INC J
         ERPT_ERPT+J/CHR.WORD+1
         IF ERPT>MAX.ER THEN ERROR('ERROR TABLE OVERFLOW')
         GO NTPOS

!OUTPUT TO THE PARSER FILE IS AS FOLLOWS
!SIZE OF PARSER TABLES
!TABLE V
!TABLE D
!TABLE ALT
!TABLE SUC
!TABLE RULE
!SIZE OF ERROR TABLE
!ERROR TABLE
!NUMBER OF RES WORDS
!RES WORDS AS SIZE,TEXT,TOKEN NUMBER

EOFR:  CLOSE(FNI)
         IF FNL>1 THEN CLOSE(FNL)
         DMP(RFDFTBL,EORDF)
RFCKL:   I_D.NXT.SYM  !CHECK FOR UNDEFINED REF
         IF ^(I+BLOCK.SIZE) BAND 1 SHL RFN.SZ #0 THEN GO RFCKL
         GET.SYM(I); CH(@SYM.BUF(SYM.BUF(0)+1))_E.O.LIT
              !INSURE 0 CHR
         MSPC ('UNDEFINED '); MESPRT (SYM.BUF); GO RFCKL
EORDF:   J_TPOS-1
         I_ERPT-1
LOCAL ADR
       WIO(FNO,J)
       WIO(FNO,I)
       BIO(FNO,V+1,J,BADIO)
       BIO(FNO,D+1,J,BADIO)
       BIO(FNO,ALT+1,J,BADIO)
       BIO(FNO,SUC+1,J,BADIO)
       BIO(FNO,RULE+1,J,BADIO)
       BIO(FNO,ERTAB+1,I,BADIO)
         J_VALNUM-DOL.VAL
       WIO(FNO,J)
         DMP(STBL,EOD)
STOLP:   I_D.NXT.SYM; IF ^(I+BLOCK.SIZE)<=DOL.VAL THEN GO STOLP
         GET.SYM(I); SYM.BUF(SYM.BUF(0)+1)_^(I+BLOCK.SIZE)
       BIO(FNO,SYMBUF,SYMBUF(0)+2,BADIO)
         GO STOLP
EOD:     MSPC ('FINISHED (T:'); PVAL(TPOS-1)
         MSPC (',E:'); PVAL(ERPT-1)
         MSPC (',S:'); PVAL(VALNUM-DOL.VAL)
         MESPRT (')'); CLOSE(FNO); EXIT

END TABGEN
%STRINP(FNUM)
         LOCAL PTR,RT,WRD.RD
!IF FNUM=0 THEN FROM TTY ELSE FROM FILE
       PTR_RT_CHPT(BUF,-1)
       IF FNUM=0 THEN DO
       WHILE NCHV(RT)_TTY#CAR.RET THEN NULL
       WRD.RD_TTY; CHV(RT)_E.O.LIT
       END ELSE DO
       WHILE WRD.RD_CIO(FNUM)#CAR.RET THEN DO
		IF WRD.RD#OCT 11 THEN NCHV(RT)_WRD.RD
	END
       CIO(FNUM)   !TO GET RID OF THE L.F.
	NCHV(RT)_E.O.LIT
       END
	RETURN PTR
END STRINP

%SCOMP(PTR1,ST2)
!COMPARE TWO STRINGS. FIRST IS A CHPT, SECOND A WORD ADDRESS
         LOCAL PTR2,I
         PTR2_CHPT(ST2,-1)
SLP:     IF I_NCHV(PTR1)#NCHV(PTR2) THEN RETURN 1
         IF I=E.O.LIT THEN RETURN 0
         GO SLP
END SCOMP

%VAL(PTR)
!READ A NUMBER FROM A STRING
         LOCAL NUM,J
         NUM_0
         WHILE $0<=J_NCHV(PTR)<=$9 THEN NUM_NUM*10+J-$0
         RETURN NUM
END VAL
%MVTSM(PTR)
!MOVE SYMBOL TO SYM.BUF
LOCAL PTRS,I
         PTRS_CHPT(@SYM.BUF(1),-1); I_0
         WHILE NCHV(PTRS)_NCHV(PTR)#E.O.LIT THEN INC I
         SYM.BUF(0)_(I+CHR.WORD-1)/CHR.WORD
         IF I_CHR.WORD-((I+1) MOD CHR.WORD)>CHR.WORD-2 THEN &
              RETURN
         WHILE DEC I>=0 THEN NCHV(PTRS)_E.O.LIT
         RETURN
END MVTSM

%ENTDEF (WD,POS)
!ENTER A DEFINITION
LOCAL LOC,POSL
         MVTSM(CHPT(WD,-1))
         LOC_BLOCK.SIZE+SYMPOS(RFDFTBL)
         IF ^LOC#0 THEN GO AENT !ALREADY THERR
ENT:     ^LOC_POS+1 SHL RFN.SZ !SET DEF BITT
         RETURN
AENT:    IF ^LOC BAND 1 SHL RFN.SZ#0 THEN GO MULDEF
         POSL_^LOC
CHAIN:   POSL_D(POSL)<==POS !LINK THROUGH UNDEF CHAIN
         IF POSL#0 THEN GO CHAIN ELSE GO ENT
MULDEF:  IF ^LOC-1 SHL RFN.SZ=POS THEN RETURN
         MSPC('MULTIPLE DEFINITION '); MESPRT(WD)
         RETURN
END ENTDEF

%ENTREF (PTR,POS)
LOCAL LOC
         MVTSM(PTR)
         LOC_BLOCK.SIZE+SYMPOS(RFDFTBL)
         IF ^LOC BAND 1 SHL RFN.SZ#0 THEN GO DEFD
         D(POS)_^LOC<==POS
         RETURN
DEFD:    D(POS)_^LOC-1 SHL RFN.SZ; RETURN
END ENTREF

%SYMTB(PTR)
LOCAL LOC
!ENTER SYMBOL IF NECESSARY. RETURNS TOKEN NUMBER
         MVTSM(PTR)
         LOC_BLOCK.SIZE+SYMPOS(STBL)
         IF ^LOC#0 THEN RETURN ^LOC
         ^LOC_INC VALNUM; RETURN VALNUM
END SYMTB

%INTS(STR,VAL)
!USED AT INTITIALIZE TIME
         MVTSM(CHPT(STR,-1))
         ^(BLOCK.SIZE+SYMPOS(STBL))_VAL; RETURN
END INTS

%PRINT.LINE.CR
         RETURN
END PRINT.LINE.CR

%MSFLD(NUM)
         WHILE DEC NUM>0 THEN CHV(FLD(NUM+1))_$,
         IF CH(BUF)=$' THEN CH(BUF,2)_$'
         MSPC('MISSING FIELD'); MESPRT(BUF)
         RETURN
END MSFLD

%PVAL(NUM)
LOCAL I,J
         I_0
         WHILE TENS(INC I)<=NUM THEN NULL
         WHILE DEC I>=0 THEN DO
               J _ NUM / TENS(I)
               NUM _ NUM MOD TENS(I)
               TTY _ J + $0
       END
         RETURN
END PVAL

%SLST
         LCNT_0;LPNT_CHPT(LBUF,-1); RETURN
END SLST

%LST(STR)
LOCAL PNT
         IF FNL<1 THEN RETURN
         IF FNL=1 THEN [MSPC(STR); RETURN]
         PNT_CHPT(STR,-1)
         WHILE NCHV(LPNT)_NCHV(PNT)#E.O.LIT THEN INC LCNT
         PCHV(LPNT); RETURN
END LST

%ELST
LOCAL I
         IF FNL<1 THEN RETURN
         IF FNL=1 THEN [TTY_CR; RETURN]
       LCNT_LCNT+2; NCHV(LPNT)_CARRET; NCHV(LPNT)_LNFEED
       I_-1; LPNT_CHPT(LBUF,-1)
       WHILE INC I#LCNT THEN CIO(FNL,NCHV(LPNT))
       RETURN
END ELST

%NUM3(NUM)
LOCAL I,J
         IF FNL<1 THEN RETURN
         I_3
         WHILE TENS(DEC I)>NUM THEN &
              IF FNL=1 THEN TTY_$  ELSE [NCHV(LPNT)_$ ;&
              INC LCNT]
         INC I
         WHILE DEC I>=0 THEN [J_NUM/TENS(I);NUM_NUM MOD TENS(I); &
              IF FNL=1 THEN TTY_J+$0 ELSE [NCHV(LPNT)_J+$0;&
              INC LCNT]]
         RETURN
END NUM3
    